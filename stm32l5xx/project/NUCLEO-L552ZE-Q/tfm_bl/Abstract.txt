TF-M with Bootloader Project Template
-------------------------------------

Target: STMicroelectronics NUCLEO-L552ZE-Q Board

Use STM32CubeProgrammer or uVision to program the following Option Bytes:
 - RDP = 0xAA (RDP Level 0)
 - TZEN = 1 (TrustZone security enabled)
 - DBANK = 1 (Dual bank mode enabled)
 - remove bank1 protection
   SECWM1_PSTRT=127, SECWM1_PEND=0, WRP1A_PSTRT=127, WRP1A_PEND=0, WRP1B_PSTRT=127, WRP1B_PEND=0
 - remove bank2 protection
   SECWM2_PSTRT=127, SECWM2_PEND=0, WRP2A_PSTRT=127, WRP2A_PEND=0, WRP2B_PSTRT=127, WRP2B_PEND=0
 - remove hdp protection
   HDP1_PEND=0, HDP1EN=0, HDP2_PEND=0, HDP2EN=0
 - SWAP_BANK = 0 (Bank 1 and bank 2 not swapped)
 - secure bank1 (first 192kB) / secure bank2 (last 192kB)
   SECWM1_PSTRT=0, SECWM1_PEND=0x5F, SECWM2_PSTRT=0x20, SECWM2_PEND=0x7F

Workspace contains the following projects:
 - bl2:    Bootloader (TF-M MCUBoot)
 - tfm_s:  TF-M firmware with secure services running on the secure side
 - tfm_ns: Template for application running on the non-secure side

Bootloader runs first and searches for a valid image containing TF-M firmware.
If image is found and authenticated it then boots into TF-M firmware which runs
next and then transfers execution to the non-secure application.

Secure side image (tfm_s) and non-secure side image (tfm_ns) are signed and
encapsulated with header and trailer during post build process.
The following external tools are required:
 - python + imgtool (>=1.7.0)
The above executables need to be in the command line path.

Running the example:
 - connect the board via USB ST-Link Port to the PC
 - use console on the PC via UART @115200bps (optional)
 - build project for the Bootloader (bl2) and flash to target
 - build project for the secure side (tfm_s) and flash to target
 - build project for the non-secure side (tfm_ns) and flash to target
 - start the debug session and run the target

Note: erase full chip first in case of flash programming issues
